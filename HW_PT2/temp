
class X_and_Z_Solution_Stage_Motor(Motor):

    def __init__(self):
        Motor.__init__(self)
        with open('stage_x_z_absolute_position.json') as f:
            self.stage_x_and_z_pos = json.load(f)

        # Need to check z first, then x
        """
        if (self.stage_x_and_z_pos["z_pos"] !=0):
            print "Moving Stage Z Home"
            target_motor = xyz_motor(2, 200, 100)
            atexit.register(target_motor.turn_off)
            target_motor.move(POSDIR, self.stage_x_and_z_pos["z_pos"], MICROSTEP, HIGHCUR)  # POSDIR makes Stage Z go down
            self.stage_x_and_z_pos["z_pos"] -= self.stage_x_and_z_pos["z_pos"]
            with open('stage_x_z_absolute_position.json', 'w') as wf:
                json.dump(self.stage_x_and_z_pos, wf)
        if (self.stage_x_and_z_pos["x_pos"] != 0):
            print "Moving Stage X HOME"
            target_motor = xyz_motor(6, 200, 100)
            atexit.register(target_motor.turn_off)
            target_motor.move(NEGDIR, self.stage_x_and_z_pos["x_pos"], MICROSTEP,
                              HIGHCUR)  # To move from big to big vial, increment is 4500
            self.stage_x_and_z_pos["x_pos"] -= self.stage_x_and_z_pos["x_pos"]
            with open('stage_x_z_absolute_position.json', 'w') as wf:
                json.dump(self.stage_x_and_z_pos, wf)
        """

    def run(self):
        # STAGE X Z edit
        # STAGE X Z edit
        global move_stageX_left_small, move_stageX_left_big, move_stageX_right_small, move_stageX_right_big, move_stageZ_up, move_stageZ_down
        global move_to_sample, move_to_buffer, move_to_water, move_to_waste

        z_stage_move_step = 6600 # 6000
        x_stage_move_step_big = 4500 # 4500
        x_stage_move_step_small = 4000 # 4000

        sample_abs_pos = 3100 #3100

        buffer_abs_pos = sample_abs_pos + x_stage_move_step_small#7100
        water_abs_pos = buffer_abs_pos + x_stage_move_step_big #11600
        waste_abs_pos = water_abs_pos + x_stage_move_step_big #16100

        while self._running:
############################## SOLUTION STATION #################################
            # Relative positioning for Solution Station X and Z
            if move_stageX_left_small:
                # Check to see if z is position 0, if not then bring z to home
                if self.stage_x_and_z_pos["z_pos"] > 0:
                    print "Moving Stage Z DOWN FIRST"
                    target_motor = xyz_motor(2, 200, 100)
                    atexit.register(target_motor.turn_off)
                    target_motor.move(POSDIR, z_stage_move_step, DOUBLECOILMICROSTEP, XZSTATIONCUR)  # POSDIR makes Stage Z go down
                    self.stage_x_and_z_pos["z_pos"] -= z_stage_move_step
                    with open('stage_x_z_absolute_position.json', 'w') as wf:
                        json.dump(self.stage_x_and_z_pos, wf)
                target_motor = xyz_motor(6, 200, 100)
                atexit.register(target_motor.turn_off)
                target_motor.move(NEGDIR, x_stage_move_step_small, DOUBLECOILMICROSTEP, XZSTATIONCUR)  # To move from big to small vial or vice versa, increment is 4000
                self.stage_x_and_z_pos["x_pos"] -= x_stage_move_step_small
                with open('stage_x_z_absolute_position.json', 'w') as wf:
                    json.dump(self.stage_x_and_z_pos, wf)
                move_stageX_left_small = 0
                port.write("done  \n")
            if move_stageX_right_small:
                # Check to see if z is position 0, if not then bring z to home
                if self.stage_x_and_z_pos["z_pos"] > 0:
                    print "Moving Stage Z DOWN FIRST"
                    target_motor = xyz_motor(2, 200, 100)
                    atexit.register(target_motor.turn_off)
                    target_motor.move(POSDIR, z_stage_move_step, DOUBLECOILMICROSTEP, XZSTATIONCUR)  # POSDIR makes Stage Z go down
                    self.stage_x_and_z_pos["z_pos"] -= z_stage_move_step
                    with open('stage_x_z_absolute_position.json', 'w') as wf:
                        json.dump(self.stage_x_and_z_pos, wf)
                print "Moving Stage X RIGHT"
                target_motor = xyz_motor(6, 200, 100)
                atexit.register(target_motor.turn_off)
                target_motor.move(POSDIR, x_stage_move_step_small, DOUBLECOILMICROSTEP, XZSTATIONCUR)  # To move from big to small vial or vice versa, increment is 4000
                self.stage_x_and_z_pos["x_pos"] += x_stage_move_step_small
                with open('stage_x_z_absolute_position.json', 'w') as wf:
                    json.dump(self.stage_x_and_z_pos, wf)
                move_stageX_right_small = 0
                port.write("done   \n")
                # print "sent done to port"
            if move_stageX_left_big:
                # Check to see if z is position 0, if not then bring z to home
                if self.stage_x_and_z_pos["z_pos"] > 0:
                    print "Moving Stage Z DOWN FIRST"
                    target_motor = xyz_motor(2, 200, 100)
                    atexit.register(target_motor.turn_off)
                    target_motor.move(POSDIR, z_stage_move_step, DOUBLECOILMICROSTEP, XZSTATIONCUR)  # POSDIR makes Stage Z go down
                    self.stage_x_and_z_pos["z_pos"] -= z_stage_move_step
                    with open('stage_x_z_absolute_position.json', 'w') as wf:
                        json.dump(self.stage_x_and_z_pos, wf)
                # print "Moving Stage X LEFT"
                target_motor = xyz_motor(6, 200, 100)
